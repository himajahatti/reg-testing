        -:    0:Source:binary_search.c
        -:    0:Graph:binary_search.gcno
        -:    0:Data:binary_search.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        1:    3:int binarySearch(int arr[], int left, int right, int target) {
        6:    4:    while (left <= right) {
        4:    5:        int mid = left + (right - left) / 2;
        4:    6:        if (arr[mid] == target)
    #####:    7:            return mid;
        4:    8:        if (arr[mid] < target)
        4:    9:            left = mid + 1;
        -:   10:        else
    #####:   11:            right = mid - 1;
        -:   12:    }
        1:   13:    return -1;
        -:   14:}
        1:   15:int main(int argc, char *argv[]) {
        1:   16:    int n = argc - 4;
        1:   17:    int *arr = (int *)malloc(n * sizeof(int));
       11:   18:    for (int i = 0; i < n; i++)
       10:   19:        arr[i] = atoi(argv[i + 1]);
        1:   20:    int left = atoi(argv[n + 1]);
        1:   21:    int right = atoi(argv[n + 2]);
        1:   22:    int target = atoi(argv[n + 3]);
        1:   23:    int result = binarySearch(arr, left, right, target);
        1:   24:    if (result == -1)
        1:   25:        printf("-1\n");
        -:   26:    else
    #####:   27:        printf("%d\n", result);
        1:   28:    free(arr);
        1:   29:    return 0;
        -:   30:}
